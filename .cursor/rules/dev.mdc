---
alwaysApply: true

# 前端技术选型 (Tech Stack)

核心框架：Vue3 (Vue)

样式方案：Tailwind CSS

动画库：Framer Motion

职责： 实现页面过渡、组件入场/出场、以及战斗场景中的动态效果，提升产品的“灵动感”和“高级感”。

滑动组件库：Swiper.js


# 开发协作规范 (Collaboration Workflow)

**单一真相来源 (Single Source of Truth):**

Figma设计稿是UI的唯一标准。 所有前端实现，包括颜色、字体、间距、圆角等，都必须严格参照Figma中的标注。

组件化开发 (Component-Based Development):

将UI拆分为可复用的vue组件。例如：PlantMonCard（植宠卡片）、AttributePill（属性标签）、BattleAvatar（战斗头像）等。这有助于代码复用和后期维护。

代码规范:

我们使用vue内置的ESLint和Prettier配置，在提交代码前自动格式化，确保团队代码风格统一。

# SVG素材适配与交付规范 (The SVG Protocol)

这是设计与前端协作中最重要的一环，直接影响开发效率和最终效果。


##  所有UI素材都会以SVG形式提供，你需要以两种主要方式在代码中使用SVG：

方式一：作为图片 (Image)

适用场景： 复杂的、静态的、不需要动态改变颜色的SVG，例如我们约定好的bottom-navigation-bar.svg。

实现： 直接使用vue的 <Image> 组件加载SVG文件。

```jsx
import Image from 'next/image';
import bottomNav from '../public/assets/bottom-navigation-bar.svg';
 
<Image src={bottomNav} alt="Navigation" />
```

方式二：作为vue组件 (vue Component) - 推荐用于图标

适用场景： 简单的、需要用CSS动态改变颜色或尺寸的图标。

实现： 我们可以配置项目，让SVG可以直接作为vue组件导入。这样，我们可以通过CSS的 color 属性来控制图标颜色。


昊蓝请注意：

```jsx
// 导入时，像导入组件一样
import ArrowLeftIcon from '../public/assets/icon-arrow-left.svg';
 
// 使用时，可以通过className来控制颜色和大小
<ArrowLeftIcon className="w-6 h-6 text-white hover:text-gray-400" />
```

---
